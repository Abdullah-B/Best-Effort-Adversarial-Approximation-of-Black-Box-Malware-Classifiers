# import lief

import csv

# import os

# import csv
# import time


import numpy as np
import pandas as pd
Bin =0
Mal =0
train_labelsM = pd.read_csv(' Tables/tmp_16K_CH.csv', index_col=False) #FileNames_revised.csv
   
BB_P = train_labelsM['BB_P'].tolist()
AP_P = train_labelsM['AP_P'].tolist()
zipped = list(zip(BB_P, AP_P))
KCH = 0
for B,A in zipped:
    if B == A:
        KCH+=1
        if B==0:
            Bin+=1
        else:
            Mal+=1
print('16K_CH performance vas BB')         
print(KCH/5254)
print('16K_CH Malware performance vas BB')  
print(Mal/4282)
print('16K_CH Benign performance vas BB')  
print(Bin/972)
print("**************************************")
Bin =0
Mal =0
train_labelsM = pd.read_csv(' Tables/tmp_16K_EN.csv', index_col=False) #FileNames_revised.csv
   
BB_P = train_labelsM['BB_P'].tolist()
AP_P = train_labelsM['AP_P'].tolist()
zipped = list(zip(BB_P, AP_P))
KEN = 0
for B,A in zipped:
    if B == A:
        KEN+=1
        if B==0:
            Bin+=1
        else:
            Mal+=1        
print('16K_EN performance vas BB')     
print(KEN/6556)
print('16K_EN Malware performance vas BB')  
print(Mal/5483)
print('16K_EN Benign performance vas BB')  
print(Bin/1073)
print("**************************************")


Bin =0
Mal =0
train_labelsM = pd.read_csv(' Tables/tmp_32K_Flipped_CH.csv', index_col=False) #FileNames_revised.csv
   
BB_P = train_labelsM['BB_P'].tolist()
AP_P = train_labelsM['AP_P'].tolist()
zipped = list(zip(BB_P, AP_P))
KCH = 0
for B,A in zipped:
    if B == A:
        KCH+=1
        if B==0:
            Bin+=1
        else:
            Mal+=1
print('32K_F_CH performance vas BB')     
print(KCH/5254)
print('32K_CH Malware performance vas BB')  
print(Mal/4282)
print('32K_CH Benign performance vas BB')  
print(Bin/972)
print("**************************************")


Bin =0
Mal =0
train_labelsM = pd.read_csv(' Tables/tmp_32K_Flipped_EN.csv', index_col=False) #FileNames_revised.csv
   
BB_P = train_labelsM['BB_P'].tolist()
AP_P = train_labelsM['AP_P'].tolist()
zipped = list(zip(BB_P, AP_P))
KEN = 0
for B,A in zipped:
    if B == A:
        KEN+=1
        if B==0:
            Bin+=1
        else:
            Mal+=1
print('32K_F_EN performance vas BB')     
   
print(KEN/6556)
print('32K_EN Malware performance vas BB')  
print(Mal/5483)
print('32K_EN Benign performance vas BB')  
print(Bin/1073)
print("**************************************")


Bin =0
Mal =0
train_labelsM = pd.read_csv(' Tables/tmp_48K_FR_CH.csv', index_col=False) #FileNames_revised.csv
   
BB_P = train_labelsM['BB_P'].tolist()
AP_P = train_labelsM['AP_P'].tolist()
zipped = list(zip(BB_P, AP_P))
KCH = 0
for B,A in zipped:
    if B == A:
        KCH+=1
        if B==0:
            Bin+=1
        else:
            Mal+=1
print('48K__FR_CH performance vas BB')     
print(KCH/5254)
print('48K_CH Malware performance vas BB')  
print(Mal/4282)
print('48K_CH Benign performance vas BB')  
print(Bin/972)
print("**************************************")
Bin =0
Mal =0
train_labelsM = pd.read_csv(' Tables/tmp_48K_FR_EN.csv', index_col=False) #FileNames_revised.csv
   
BB_P = train_labelsM['BB_P'].tolist()
AP_P = train_labelsM['AP_P'].tolist()
zipped = list(zip(BB_P, AP_P))
KEN = 0
for B,A in zipped:
    if B == A:
        KEN+=1
        if B==0:
            Bin+=1
        else:
            Mal+=1
print('48K_FR_EN performance vas BB')        
print(KEN/6556)
print('48K_EN Malware performance vas BB')  
print(Mal/5483)
print('48K_EN Benign performance vas BB')  
print(Bin/1073)
print("**************************************")

# train_labelsM = pd.read_csv('F:/DataCollection2/FileNames.csv', index_col=False)
# df_train=pd.DataFrame(train_labelsM)
# #for loop sha259 in filename only if col y=1
# for index, row in df_train.iterrows():
#     filename=row['sha256']
#     if row['y']==1:
#         try:
#             binary = lief.parse('G:/DataCollection2/Malware/VirusShare_8eec6544c343bd7ec3920c65224dfaa9')
#             print("i was able to parse")
            

# with open('F:/DataCollection2/FileNamesB2.csv') as csv_file:
#     csv_reader = csv.reader(csv_file)   
#     df = pd.DataFrame(csv_reader)
#     df.to_csv('F:/DataCollection2/KMP.csv')
#     csv_file.close()

# print(df)
# try:
        
#     with open('F:/DataCollection/%DeviceDesc%.exe',"rb") as f:

#             header =f.read()
# except:
#     with open('H:/DataCollection/%DeviceDesc%.exe',"rb") as f:

#             header =f.read()

# train_labelsM = pd.read_csv('F:/DataCollection2/FileNames.csv', index_col=False) #FileNames_revised.csv
# df = pd.DataFrame(csv_reader)
# df.groupby('y').size()

         

# train_labelsM = pd.read_csv('F:/DataCollection2/KMP.csv', index_col=False ) #FileNames_revised.csv      
# print(train_labelsM)    
     
                    
#         except:
#             print("couldn't parce not pe")
#             delete_row=index
#             print(index)
#             df_train.drop(delete_row,axis=0,inplace=True)
        
# train_labelsM = pd.read_csv('F:/DataCollection2/FileNames_revised.csv', index_col=False) #FileNames_revised.csv
# train_labelsM = train_labelsM[ train_labelsM['y'] != -1 ] # get only labeled samples
# labels = train_labelsM['y'].tolist()
# hashes = train_labelsM['sha256'].tolist()

# from sklearn.model_selection import train_test_split
# hashes_train, hashes_val, labels_train, labels_val = train_test_split( hashes, labels, test_size=200 )

# print (len(hashes_train)//100)
#dataframe into a csv file sha256 and y cols filename_revised 
#df_train.to_csv('F:/DataCollection2/FileNames_revised.csv')
# print(len(df_train.index))
# df_train.to_csv('F:/DataCollection2/FileNames_revised.csv')
# train_labelsM = pd.read_csv('D:/DataCollection2/HashesMl.csv',skiprows=range(1,1286), index_col=False)
# train_labelsM = train_labelsM[ train_labelsM['y'] != -1 ] # get only labeled samples
# labels = train_labelsM['y'].tolist()
# hashes = train_labelsM['sha256'].tolist()
# train_labelsB = pd.read_csv('D:/DataCollection2/HashesBn.csv',index_col=False)
# train_labelsB = train_labelsB[ train_labelsB['y'] != -1 ] # get only labeled samples
# labels.append(train_labelsB['y'].tolist())
# hashes.append(train_labelsB['sha256'].tolist())
# print(hashes[:10000])


#print(hashes.shape[0])





# if  binary :

#     filename = "VirusShare_196254397e96337f8f72ef1f54303858"
#     print(binary)

#     sha256_hash = hashlib.sha256()
#     with open('D:/DataCollection2/'+filename,"rb") as f:
#         for byte_block in iter(lambda: f.read(4096),b""):
#             sha256_hash.update(byte_block)
#         print(sha256_hash.hexdigest())
#         print("05a0cb6bbd30b16cd54c0a168e2a983465ab0540e94436d89b791cfe8b910570")

#from   bs4 import BeautifulSoup
# import lief
# import requests
# import csv
# import re
# import os
# import urllib3
# import csv
# import time
# import hashlib #import sha256
# from   hashlib import sha256
          
# directory = os.fsencode("D:/DataCollection2/Malware")# change for other stuff || on Malware rn
# flag = True
# nbr = 0
# for file in os.listdir(directory):
#     #print("new file")
#     filename = os.fsdecode(file)
#     sha256_hash = hashlib.sha256()
#     print('new file')
#     try:
#         binary = lief.parse('D:/DataCollection2/Malware/'+filename)
    
    
#         with open('D:/DataCollection2/HashesMl.csv', 'a') as csvFile:
#             writer = csv.writer(csvFile)
#             filename = os.fsdecode(file)
#             #if filename.endswith(".exe"):
#             #print("its exe")
#             with open('D:/DataCollection2/Malware/'+filename,"rb") as f:
#     # Read and update hash string value in blocks of 4K
#                 for byte_block in iter(lambda: f.read(4096),b""):
#                     sha256_hash.update(byte_block)
#                 row = [sha256_hash.hexdigest(), '1',nbr]
#                 print(sha256_hash.hexdigest())
                
#                 nbr=nbr+1
#                 writer.writerow(row)
                
#                 csvFile.close()
#     except:
#         print("couldn't parce not pe")
    

# import numpy as np
# import tensorflow as tf
# from datetime import datetime

# # Choose which device you want to test on: either 'cpu' or 'gpu'
# devices = ['cpu', 'gpu']

# # Choose size of the matrix to be used.
# # Make it bigger to see bigger benefits of parallel computation
# shapes = [(50, 50), (100, 100), (500, 500), (1000, 1000)]


# def compute_operations(device, shape):
#     """Run a simple set of operations on a matrix of given shape on given device

#     Parameters
#     ----------
#     device : the type of device to use, either 'cpu' or 'gpu' 
#     shape : a tuple for the shape of a 2d tensor, e.g. (10, 10)

#     Returns
#     -------
#     out : results of the operations as the time taken
#     """

#     # Define operations to be computed on selected device
#     with tf.device(device):
#         random_matrix = tf.random_uniform(shape=shape, minval=0, maxval=1)
#         dot_operation = tf.matmul(random_matrix, tf.transpose(random_matrix))
#         sum_operation = tf.reduce_sum(dot_operation)

#     # Time the actual runtime of the operations
#     start_time = datetime.now()
#     with tf.Session(config=tf.ConfigProto(log_device_placement=True)) as session:
#             result = session.run(sum_operation)
#     elapsed_time = datetime.now() - start_time

#     return result, elapsed_time



# if __name__ == '__main__':

#     # Run the computations and print summary of each run
#     for device in devices:
#         print("--" * 20)

#         for shape in shapes:
#             _, time_taken = compute_operations(device, shape)

#             # Print the result and also the time taken on the selected device
#             print("Input shape:", shape, "using Device:", device, "took: {:.2f}".format(time_taken.seconds + time_taken.microseconds/1e6))
#             #print("Computation on shape:", shape, "using Device:", device, "took:")

#     print("--" * 20)