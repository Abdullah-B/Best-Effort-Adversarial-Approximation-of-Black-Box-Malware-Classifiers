# from keras.layers import Dense, Conv1D, Activation, GlobalMaxPooling1D, Input, Embedding, Multiply
# from keras.models import Model
# from keras import backend as K
# from keras import metrics
# import multi_gpu
# import os
# import math
# import random
# import argparse
# import os
# import sys
# import numpy as np
# import pandas as pd
# from os import path
# from keras.models import load_model

# batch_size = 100
# input_dim = 257 # every byte plus a special padding symbol
# padding_char = 256

# parser = argparse.ArgumentParser()
# parser.add_argument('--gpus', help='number of GPUs', default=1)

# args = parser.parse_args()
# ngpus = int(args.gpus)
# basemodel = load_model('malconv.h5')
# _, maxlen, embedding_size = basemodel.layers[1].output_shape
# input_dim
# print(maxlen)
# def bytez_to_numpy(bytez,maxlen):
    
#     b = np.ones( (maxlen,), dtype=np.uint16 )*padding_char
#     bytez = np.frombuffer( bytez[:maxlen], dtype=np.uint8 )
#     b[:len(bytez)] = bytez
#     return b
# def getfile_service(sha256,lbl,maxlen=maxlen, ): #add try catch clause
#         #use this to loop over the file of data names and call file.read() then pass that to the bytez to numpy
#         # if url is None:
#         #     raise NotImplementedError("You must provide your own url for getting file bytez by sha256")
#         # r = requests.get( url, params={'sha256':sha256} )# what on earth is this
#         # if not r.ok:
#         #     return None
#         if lbl ==1:

#             with open('G:/DataCollection2/Malware/'+sha256,"rb") as f: 
#                 header =f.read()
                
#         else:
#             with open('F:/DataCollection/'+sha256,"rb") as f:
#                 header =f.read()
                
#         return bytez_to_numpy( header, maxlen )     
# def generator( hashes, labels, batch_size, shuffle=True ):
#     X = []
#     y = []
#     zipped = list(zip(hashes, labels))
#     while True:
#         if shuffle:
#             random.shuffle( zipped )
#         for sha256,l in zipped:
#             # get bytes from the hexa need to change
#             try:
#                 x = getfile_service(sha256,l,maxlen)
#                 if x is None:
#                     continue
#                 X.append( x )
#                 y.append( l )
#                 if len(X) == batch_size:
#                     yield np.asarray(X,dtype=np.uint16), np.asarray(y)
#                     X = []
#                     y = []
#             except:
                
#                 continue



# with open('H:/DataCollection/Libre AV Converter.exe',"rb") as f:

#     header =f.read()
            
            
#     bytez = bytez_to_numpy( header, maxlen ) 
        
# # test_labels = pd.read_csv('F:/DataCollection2/HashesMl.csv', index_col=False)
# # labels_test = test_labels['y'].tolist()
# # hashes_test = test_labels['sha256'].tolist()


# #test_generator = generator(hashes_test,labels_test,batch_size=1,shuffle=False)
# #test_p = basemodel.predict_generator( test_generator, steps=len(test_labels), verbose=1 )
# # loss, acc = basemodel.evaluate_generator( test_generator, steps=len(test_labels), verbose=1 )
# # print(acc)
# # print(loss)
# print(len(bytez))
# X=[]
# X.append(bytez)
# X = np.asarray(X,dtype=np.uint16)
# pred = basemodel.predict(X)
# print(pred)



# #################################
# # maxlen = int((2**20)/3)
# # train_labelsM = pd.read_csv('F:/DataCollection2/TS2.csv', index_col=False) #FileNames_revised.csv
# # s=train_labelsM['sha256'][200]

# # a = np.fromstring(s,dtype=np.uint8)

# # b = np.ones( (maxlen,), dtype=np.uint16 )*256

# # b[:len(a)] = a

# # v = np.array2string(b)
# # v = np.fromstring(v)

# # print(a)
# # print(s)
# # print(b)
# # print(v)
# ###################################
# # np.set_printoptions(threshold=sys.maxsize)
# # maxlen = 2**20 # 1MB
# # maxlen = int(maxlen/3) #3
# # padding_char = 256

# # def bytez_to_numpy(bytez,maxlen):

     
# #     b = np.ones( (maxlen,), dtype=np.uint16 )*padding_char
# #     bytez = np.frombuffer( bytez[:maxlen], dtype=np.uint8 )
# #     b[:len(bytez)] = bytez
    
# #     return b


# # with open('G:/DataCollection2/Malware/VirusShare_e7bb65619b2b953a540d20dff83011ce',"rb") as f:

# #     header =f.read()
            
            
# #     bytez = bytez_to_numpy( header, maxlen )




# # data = pd.read_csv('F:/DataCollection2/TS2.csv', index_col=False)
# # df = pd.DataFrame(data)
# # exists = df[df.isin(['definitly not inthere'])].dropna(how='all').count()
# # print(exists[0])
# #################################################################################
# train_labelsM = pd.read_csv('F:/DataCollection2/IMG_M.csv', index_col=False) #FileNames_revised.csv

# labels = train_labelsM['Predicted'].tolist()
# hashes = train_labelsM['FileName'].tolist()
# acct   = train_labelsM['Actual'].tolist()
# print('getting names and lables')
# #predictor = generator(hashes,labels,batch_size=1,shuffle=False)
# zipped = list(zip(hashes, labels,acct ))
# df_MM = pd.DataFrame(columns =['FileName', 'Actual','Predicted'])
# df_MB = pd.DataFrame(columns =['FileName', 'Actual','Predicted'])
# #BB_p = basemodel.predict_generator( predictor, steps=len(test_labels), verbose=1 )




# for FN,l,a in zipped:
         
#     #try:

    
 
    
#     if l == 1:
#         row = {'FileName' : FN, 'Actual' :  a,'Predicted' : l}
#         df_MM = df_MM.append(row, ignore_index=True)
#         # dst = FN.replace('.exe', '')
#         # dst = dst.replace(':/DataCollection/','')
#         # dst = dst + '.png'
#         # if path.exists('I:/Benign/'+dst):

#         #     os.rename('I:/Benign/'+dst,'I:/Benign/'+'Benign_'+dst)
#         # else:
#         #     print("not imagised yet")
#     else:
#         row = {'FileName' : FN, 'Actual' : a, 'Predicted' : l}
#         df_MB = df_MB.append(row, ignore_index=True)
#         # dst = FN.replace('.exe', '')
#         # dst = dst.replace(':/DataCollection/','')
#         # dst = dst + '.png'
#         # if path.exists('I:/Benign/'+dst):

#         #     os.rename('I:/Benign/'+dst,'I:/Benign/'+'Malware_'+dst)
#         # else:
#         #     print("not imagised yet")
#     # print(row)
#     #except:
#         #print('something faile')


# df_MB.to_csv('F:/DataCollection2/MB.csv')
# df_MM.to_csv('F:/DataCollection2/MM.csv')


# directory = os.fsencode(directory_in_str)

# for file in os.listdir(directory):
#      filename = os.fsdecode(file)

 
    # dst = FN.replace('.exe', '')
    # dst = dst.replace(':/DataCollection/','')
    # dst = dst + '.png'
    # if path.exists('I:/Benign/'+dst):

    #     os.rename('I:/Benign/'+dst,'I:/Benign/'+'Benign_'+dst)

# import subprocess
# directory = os.fsencode("I:/InceptionV3DataCH/Benign")

# for file in os.listdir(directory):
#     filename = os.fsdecode(file)# plus file name
    
#     cmd = "python label_image.py --graph= F:/DataCollection2/tmp92Acc89Val_8KCH/output_graph.pb --labels= F:/DataCollection2/tmp92Acc89Val_8KCH/output_labels.txt --input_layer= Placeholder --output_layer= final_result --image= I:/TestCH\/"+filename
#     out_str = subprocess.check_output(cmd, shell=True)
#     print(filename)
#     # See if it works.
    #print(out_str)  
 #   python label_image.py --graph=F:/DataCollection2/tmp92Acc89Val_8KCH/output_graph.pb --labels=F:/DataCollection2/tmp92Acc89Val_8KCH/output_labels.txt --input_layer=Placeholder --output_layer=final_result --image I:/TestCH/Benign_HSynei System Utilities.png

 # example of random rotation image augmentation
 ####################################################################
 ######################################3
 #########################################
 #############################################
from numpy import expand_dims
from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array
from keras.preprocessing.image import ImageDataGenerator
from matplotlib import pyplot
from os import path
from PIL import Image, ImageDraw
import os
# load the image
v=0
directory = os.fsencode("H:/DataCollection2")
#dirct = 'G:\\DataCollection2\\InceptionV3DataFlip_EN\\Benign\\'
# print("started Benign")
for file in os.listdir(directory):
    filename = os.fsdecode(file)# plus file name
    if path.exists('I:/BenignData/DataCollection/'+filename):
        v+=1
        print("found match"+str(v))
        

print(v)


#     target = 'I:/InceptionV3DataEN_8K/Benign/'+filename
    
#     im = Image.open(r"I:/InceptionV3DataEN_8K/Benign/"+filename)
#     im_flipp = im.transpose(Image.ROTATE_180)
#     im_flipp2 = im.transpose(Image.FLIP_TOP_BOTTOM)
# # Shows the image in image viewer  
     
#     filename = filename.replace('.png', '')
   
    
#     im_flipp.save(dirct+'180_'+filename+'.png')
#     im_flipp2.save(dirct+'Fipped_'+filename+'.png')
#     im.save(dirct+filename+'.png')
    ###################################################
    #################################################################
    ##########################################################################################################
    # img = load_img(target)
    # print(filename)
    # # convert to numpy array
    # data = img_to_array(img)
    # # expand dimension to one sample
    # samples = expand_dims(data, 0)
    # # create image data augmentation generator
    # datagen = ImageDataGenerator(vertical_flip=True) #  brightness_range=[0.2,1.0] rotation_range=60
    # # prepare iterator
    #  
    # it = datagen.flow(samples, batch_size=1)#, save_to_dir=dirct)

    # # generate samples and plot
    # batch = it[0]
    # image1 =batch[0].astype('uint8')
    # img = Image.fromarray(image1, 'RGB')

    # img.save(dirct+'fipped'+filename+'.png')
    # img.show()

    # tricky = it.next()[0].astype('uint8')
    # img = Image.fromarray(tricky,'RGB')
    # img.show()

    # tricky2 = it.next()[0].astype('uint8')
    # img = Image.fromarray(tricky2,'RGB')
    # img.show()

    # tricky4 = it.next()[0].astype('uint8')
    # img = Image.fromarray(tricky4,'RGB')
    # img.show()

    # tricky3 = it.next()[0].astype('uint8')
    # img = Image.fromarray(tricky3,'RGB')
    # img.show()
    # for i in range(3):
    #     #define subplot
    #     pyplot.subplot(330 + 1 + i)
    #     #generate batch of images
    #     batch = it.next()

    #     #convert to unsigned integers for viewing
    #     image = batch[0].astype('uint8')
    #     v+=1
    #     #plot raw pixel data
        
    #     pyplot.imshow(image)
    # #show the figure
    # pyplot.show()
 ########################### uncomment below later
# print(v)
# directory = os.fsencode("I:/InceptionV3DataEN_8K/Malware")
# dirct = 'G:\\DataCollection2\\InceptionV3DataFlip_EN\\Malware\\' 
# print("started Malware")
# v=0
# for file in os.listdir(directory):
#     filename = os.fsdecode(file)# plus file name
#     target = 'I:/InceptionV3DataEN_8K/Malware/'+filename
    
#     im = Image.open(r"I:/InceptionV3DataEN_8K/Malware/"+filename)
#     im_flipp = im.transpose(Image.ROTATE_180)
     
# # Shows the image in image viewer  
    
#     filename = filename.replace('.png', '')     
#     im_flipp.save(dirct+'180_'+filename+'.png')
##################################until here
    #im.save(dirct+filename+'.png')
#     img = load_img(target)
#     # convert to numpy array
#     data = img_to_array(img)
#     # expand dimension to one sample
#     samples = expand_dims(data, 0)
#     # create image data augmentation generator
#     datagen = ImageDataGenerator(vertical_flip=True) #  brightness_range=[0.2,1.0]  rotation_range=90
#     # prepare iterator
#     
#     it = datagen.flow(samples, batch_size=2, save_to_dir=dirct)
#     # generate samples and plot


#     for i in range(2):

#         # define subplot
#         #pyplot.subplot(330 + 1 + i)
#         # generate batch of images
#         batch = it.next()

#         # convert to unsigned integers for viewing
#         image = batch[0].astype('uint8')
#         # plot raw pixel data
#         v+=1
#         #pyplot.imshow(image)
#     # show the figure
#     #pyplot.show()
# print(v)